using JuMP
using CPLEX
using CSV
using DelimitedFiles
using Random, Distributions
using Plots

###################################### (1) Generatre process times ####################################################################
number_machines = 3
number_jobs = 5
number_instances = 100
process_times = zeros(number_machines, number_jobs, number_instances)

# Normal distribution
mean_array = zeros(number_machines, number_jobs)
std_array = zeros(number_machines, number_jobs)
for k = 2:number_instances
    for i = 1:number_machines
        for j = 1:number_jobs
            if k == 2
                mean_array[i,j] = rand(Uniform(5,120))
                std_array[i,j] = mean_array[i,j]*(rand(Uniform(0.1,0.3)))
            end
            process_times[i,j,k] = rand(truncated(Normal(mean_array[i,j],std_array[i,j]),0,500))
        end
    end
end
for i = 1:number_machines
    for j = 1:number_jobs
        process_times[i,j,1] = mean_array[i,j]
    end
end

# Triangle distribution
min_array = zeros(number_machines, number_jobs)
max_array = zeros(number_machines, number_jobs)
mid_array = zeros(number_machines, number_jobs)
range_array = zeros(number_machines, number_jobs)
for k = 1:number_instances
    for i = 1:number_machines
        for j = 1:number_jobs
            if k == 1
                min_array[i,j] = rand(Uniform(10,50))
                max_array[i,j] = rand(Uniform(70,110))
                mid_array[i,j] = rand(Uniform(min_array[i,j],max_array[i,j]))
                range_array[i,j] = max_array[i,j] - min_array[i,j]
            end
            process_times[i,j,k] = rand(TriangularDist(min_array[i,j],max_array[i,j],mid_array[i,j]))
        end
    end
end
process_times[:,:,1] = mid_array

###################################### (2) Calculating h_0 (Deterministic Cmax) ####################################################################
det_starttimes_data = zeros(number_machines,number_jobs)
m = Model(CPLEX.Optimizer)
MOI.set(m, MOI.Silent(), true)
@variable(m, start_times[i=1:number_machines,j=1:number_jobs] >= 0)
@variable(m, cmax >= 0)
@variable(m, X[i=1:number_jobs,j=1:number_jobs], Bin)
@variable(m, process_order[i=1:number_machines,j=1:number_jobs] >= 0)
@variable(m, starttime_order[i=1:number_machines,j=1:number_jobs] >= 0)
@variable(m, Bin[i=1:number_machines-1,j=1:number_jobs-1], Bin)
@constraint(m, [i=1:number_jobs], sum(X[i,k] for k=1:number_jobs) == 1)
@constraint(m, [i=1:number_jobs], sum(X[k,i] for k=1:number_jobs) == 1)
@constraint(m, process_order .== process_times[:,:,1]*X)
@constraint(m, [i=1:number_machines,j=1:number_jobs,k=1:number_jobs], starttime_order[i,j] <= start_times[i,k] + (1 - X[k,j])*10000)
@constraint(m, [i=1:number_machines-1], starttime_order[i+1,1] == starttime_order[i,1] + process_order[i,1]) # First job
@constraint(m, [i=1:number_jobs-1], starttime_order[1,i+1] == starttime_order[1,i] + process_order[1,i])   # First machine
@constraint(m, [i=1:number_machines-1,j=1:number_jobs-1], starttime_order[i+1,j+1] >= starttime_order[i+1,j] + process_order[i+1,j])
@constraint(m, [k=1:number_machines-1,i=1:number_jobs-1], starttime_order[k+1,i+1] >= starttime_order[k,i+1] + process_order[k,i+1])
@constraint(m, [i=1:number_machines-1,j=1:number_jobs-1], starttime_order[i+1,j+1] <= starttime_order[i+1,j] + process_order[i+1,j] + 10000*Bin[i,j])
@constraint(m, [i=1:number_machines-1,j=1:number_jobs-1], starttime_order[i+1,j+1] <= starttime_order[i,j+1] + process_order[i,j+1] + 10000*(1 - Bin[i,j]))
@constraint(m, cmax == starttime_order[number_machines,number_jobs] + process_order[number_machines,number_jobs])
@objective(m, Min,cmax)
optimize!(m)
h_0 = objective_value(m)
println(h_0)
for i = 1:number_machines
    for j = 1:number_jobs
        det_starttimes_data[i,j] = JuMP.value(starttime_order[i,j])
    end
end

###################################### (3) Determining ub and delta for the buffer and lambda ####################################################################
lambda = 1.5
lambda_increment = 0.01
lambda_iters = Int64(round((lambda - 1)/lambda_increment)) + 1

allowable_buffer = zeros(1,number_machines)
for i = 1:number_machines
    allowable_buffer[1,i] = lambda*h_0 - det_starttimes_data[i,1,1] - sum(process_times[i,j,1] for j = 1:number_jobs)
end
total_allowable_buffer = sum(allowable_buffer[1,i] for i = 1:number_machines)
buffer_increment = 0.01*total_allowable_buffer
index_b = Int64(round((total_allowable_buffer)/buffer_increment)) + 1

global h_i = zeros(1,index_b)
global cmax_grid = zeros(1,lambda_iters, index_b)
global cmax_store = zeros(number_instances-1, lambda_iters, index_b)
global prob_store = zeros(1,lambda_iters,index_b)
global number_infeasible = zeros(1,index_b)
global infeasible_increments = 0
global buffer_grid = zeros(1,lambda_iters, index_b)
for i = 1:lambda_iters
    for j = 1:index_b
        buffer_grid[1,i,j] = buffer_increment*(j-1)
    end
end
for buff_iter = 1:index_b
###################################### (4) Determining the h_b for buffer level ####################################################################
    m = Model(CPLEX.Optimizer)
    MOI.set(m, MOI.Silent(), true)
    @variable(m, start_times[i=1:number_machines,j=1:number_jobs] >= 0)
    @variable(m, cmax >= 0)
    @variable(m, X[i=1:number_jobs,j=1:number_jobs], Bin)
    @variable(m, process_order[i=1:number_machines,j=1:number_jobs] >= 0)
    @variable(m, starttime_order[i=1:number_machines,j=1:number_jobs] >= 0)
    @variable(m, Bin[i=1:number_machines-1,j=1:number_jobs-1], Bin)
    @variable(m, buffer[i=1:number_machines,j=1:number_jobs] >= 0)
    @variable(m, buffer_order[i=1:number_machines,j=1:number_jobs] >= 0)
    @constraint(m, [i=1:number_jobs], sum(X[i,k] for k=1:number_jobs) == 1)
    @constraint(m, [i=1:number_jobs], sum(X[k,i] for k=1:number_jobs) == 1)
    @constraint(m, process_order .== process_times[:,:,1]*X)
    @constraint(m, buffer .<= process_times[:,:,1])
    @constraint(m, [i=1:number_machines,j=1:number_jobs,k=1:number_jobs], buffer_order[i,j] <= buffer[i,k] + (1 - X[k,j])*10000)
    @constraint(m, [i=1:number_machines,j=1:number_jobs,k=1:number_jobs], buffer_order[i,j] >= buffer[i,k] - (1 - X[k,j])*10000)
    @constraint(m, [i=1:number_machines,j=1:number_jobs,k=1:number_jobs], starttime_order[i,j] <= start_times[i,k] + (1 - X[k,j])*10000)
    @constraint(m, [i=1:number_machines], buffer_order[i,number_jobs] <= 0)
    @constraint(m, starttime_order[1,1] == 0)
    @constraint(m, [i=1:number_machines-1], starttime_order[i+1,1] == starttime_order[i,1] + process_order[i,1] + buffer_order[i,1]) # First job
    @constraint(m, [i=1:number_jobs-1], starttime_order[1,i+1] == starttime_order[1,i] + process_order[1,i] + buffer_order[1,i])   # First machine
    @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1], starttime_order[i+1,j+1] >= starttime_order[i+1,j] + process_order[i+1,j] + buffer_order[i+1,j])
    @constraint(m, [k=1:number_machines-1,i=1:number_jobs-1], starttime_order[k+1,i+1] >= starttime_order[k,i+1] + process_order[k,i+1] + buffer_order[k,i+1])
    @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1], starttime_order[i+1,j+1] <= starttime_order[i+1,j] + process_order[i+1,j] + 10000*Bin[i,j] + buffer_order[i+1,j])
    @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1], starttime_order[i+1,j+1] <= starttime_order[i,j+1] + process_order[i,j+1] + 10000*(1 - Bin[i,j]) + buffer_order[i,j+1])
    @constraint(m, cmax == starttime_order[number_machines,number_jobs] + process_order[number_machines,number_jobs] + buffer_order[number_machines,number_jobs])
    @constraint(m, sum(sum(buffer_order[i,j] for i = 1:number_machines) for j = 1:number_jobs-1) == buffer_increment*(buff_iter-1))
    @objective(m, Min,cmax)
    optimize!(m)
    if termination_status(m) != MOI.INFEASIBLE
        global h_i[1,buff_iter] = objective_value(m)
    else
        global infeasible_increments += 1
    end

###################################### (5) Determining the cmax grid and resizing lambda ####################################################################
    #cmax_grid = zeros(1,lambda_iters, index_b)
    #global number_infeasible = 0
    for lambda_index = 1:lambda_iters
        m = Model(CPLEX.Optimizer)
        MOI.set(m, MOI.Silent(), true)
        @variable(m, start_times[i=1:number_machines,j=1:number_jobs] >= 0)
        @variable(m, cmax >= 0)
        @variable(m, X[i=1:number_jobs,j=1:number_jobs], Bin)
        @variable(m, process_order[i=1:number_machines,j=1:number_jobs] >= 0)
        @variable(m, starttime_order[i=1:number_machines,j=1:number_jobs] >= 0)
        @variable(m, Bin[i=1:number_machines-1,j=1:number_jobs-1], Bin)
        @variable(m, buffer[i=1:number_machines,j=1:number_jobs] >= 0)
        @variable(m, buffer_order[i=1:number_machines,j=1:number_jobs] >= 0)
        @constraint(m, [i=1:number_jobs], sum(X[i,k] for k=1:number_jobs) == 1)
        @constraint(m, [i=1:number_jobs], sum(X[k,i] for k=1:number_jobs) == 1)
        @constraint(m, process_order .== process_times[:,:,1]*X)
        @constraint(m, buffer .<= process_times[:,:,1])
        @constraint(m, [i=1:number_machines,j=1:number_jobs,k=1:number_jobs], buffer_order[i,j] <= buffer[i,k] + (1 - X[k,j])*10000)
        @constraint(m, [i=1:number_machines,j=1:number_jobs,k=1:number_jobs], buffer_order[i,j] >= buffer[i,k] - (1 - X[k,j])*10000)
        @constraint(m, [i=1:number_machines,j=1:number_jobs,k=1:number_jobs], starttime_order[i,j] <= start_times[i,k] + (1 - X[k,j])*10000)
        @constraint(m, starttime_order[1,1] == 0)
        @constraint(m, [i=1:number_machines-1], starttime_order[i+1,1] == starttime_order[i,1] + process_order[i,1] + buffer_order[i,1]) # First job
        @constraint(m, [i=1:number_jobs-1], starttime_order[1,i+1] == starttime_order[1,i] + process_order[1,i] + buffer_order[1,i])   # First machine
        @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1], starttime_order[i+1,j+1] >= starttime_order[i+1,j] + process_order[i+1,j] + buffer_order[i+1,j])
        @constraint(m, [k=1:number_machines-1,i=1:number_jobs-1], starttime_order[k+1,i+1] >= starttime_order[k,i+1] + process_order[k,i+1] + buffer_order[k,i+1])
        @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1], starttime_order[i+1,j+1] <= starttime_order[i+1,j] + process_order[i+1,j] + 10000*Bin[i,j] + buffer_order[i+1,j])
        @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1], starttime_order[i+1,j+1] <= starttime_order[i,j+1] + process_order[i,j+1] + 10000*(1 - Bin[i,j]) + buffer_order[i,j+1])
        @constraint(m, sum(sum(buffer_order[i,j] for i = 1:number_machines) for j = 1:number_jobs-1) == buffer_increment*(buff_iter-1))
        @constraint(m, sum(buffer_order[i,number_jobs] for i = 1:number_machines) == 0)
        @constraint(m, cmax == starttime_order[number_machines,number_jobs] + process_order[number_machines,number_jobs] + buffer_order[number_machines,number_jobs])
        @constraint(m, cmax >= h_i[1,buff_iter]*(1 + (lambda_index - 1)*lambda_increment))
        @objective(m, Min,cmax)
        optimize!(m)
        if termination_status(m) != MOI.INFEASIBLE
            global cmax_grid[1,lambda_index,buff_iter] = objective_value(m)
        else
            global number_infeasible[1,buff_iter] += 1
        end
    end
    lambda_iters_resized = Int64(lambda_iters - number_infeasible[1,buff_iter])
    #global cmax_grid = cmax_grid[:,1:lambda_iters_resized, buff_iter]

###################################### (6) Calculate Pr(Failure) for cmax grid ####################################################################
    #cmax_store = zeros(number_instances-1, lambda_iters_resized, index_b)
    #prob_store = zeros(1,lambda_iters_resized,index_b)
    for scenario = 1:lambda_iters_resized
        m = Model(CPLEX.Optimizer)
        MOI.set(m, MOI.Silent(), true)
        @variable(m, start_times[i=1:number_machines,j=1:number_jobs,k=1:number_instances-1] >= 0)
        @variable(m, cmax[i=1:number_instances-1] >= 0)
        @variable(m, X[i=1:number_jobs,j=1:number_jobs], Bin)
        @variable(m, process_order[i=1:number_machines,j=1:number_jobs,k=1:number_instances-1] >= 0)
        @variable(m, starttime_order[i=1:number_machines,j=1:number_jobs,k=1:number_instances-1] >= 0)
        @variable(m, Bin[i=1:number_machines,j=1:number_jobs,k=1:number_instances-1], Bin)
        @variable(m, obj_prob[i=1:number_instances-1], Bin)
        @constraint(m, [i=1:number_jobs], sum(X[i,j] for j=1:number_jobs) == 1)
        @constraint(m, [i=1:number_jobs], sum(X[j,i] for j=1:number_jobs) == 1)
        @constraint(m, [i=1:number_instances-1], process_order[:,:,i] .== process_times[:,:,i+1]*X)
        @constraint(m, [i=1:number_machines,j=1:number_jobs,k=1:number_jobs,z=1:number_instances-1], starttime_order[i,j,z] <= start_times[i,k,z] + (1 - X[k,j])*10000)
        @constraint(m, [z=1:number_instances-1],starttime_order[1,1,z] == 0)
        @constraint(m, [i=1:number_machines-1,j=1:number_instances-1], starttime_order[i+1,1,j] == starttime_order[i,1,j] + process_order[i,1,j]) # First job
        @constraint(m, [i=1:number_jobs-1,j=1:number_instances-1], starttime_order[1,i+1,j] == starttime_order[1,i,j] + process_order[1,i,j]) # First machine
        @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1,k=1:number_instances-1], starttime_order[i+1,j+1,k] >= starttime_order[i+1,j,k] + process_order[i+1,j,k])
        @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1,k=1:number_instances-1], starttime_order[i+1,j+1,k] >= starttime_order[i,j+1,k] + process_order[i,j+1,k])
        @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1,k=1:number_instances-1], starttime_order[i+1,j+1,k] <= starttime_order[i+1,j,k] + process_order[i+1,j,k] + 10000*Bin[i,j,k])
        @constraint(m, [i=1:number_machines-1,j=1:number_jobs-1,k=1:number_instances-1], starttime_order[i+1,j+1,k] <= starttime_order[i,j+1,k] + process_order[i,j+1,k] + 10000*(1 - Bin[i,j,k]))
        @constraint(m, [i=1:number_instances-1], cmax[i,1] == starttime_order[number_machines,number_jobs,i] + process_order[number_machines,number_jobs,i])
        @constraint(m, [i=1:number_instances-1], cmax[i,1] <= cmax_grid[1,scenario,buff_iter] + 10000*obj_prob[i,1])
        @objective(m, Min, (sum(obj_prob[i,1] for i = 1:number_instances-1))/(number_instances-1))
        optimize!(m)
        global prob_store[1,scenario,buff_iter] = objective_value(m)
        for k = 1:number_instances-1
            global cmax_store[k,scenario,buff_iter] = JuMP.value(cmax[k])
        end
        #println(scenario,"/",lambda_iters_resized)
    end
    println(buff_iter, "/", index_b)
end

###################################### (7) Exporting to text file for plotting ####################################################################
resized_index_b = index_b - infeasible_increments
number_infeasible = number_infeasible[1,1:resized_index_b]'
feasibility = zeros(1,resized_index_b)
for i = 1:resized_index_b
    feasibility[1,i] = lambda_iters - number_infeasible[1,i]
end
total_feasible = sum(feasibility)

#norm_cmax_grid = zeros(1,lambda_iters,resized_index_b)
#norm_buff_grid = zeros(1,lambda_iters,resized_index_b)
#norm_prob_grid = zeros(1,lambda_iters,resized_index_b)

#ans - min/max-min + 1
#for i = 1:resized_index_b



example_output = zeros(Int64(total_feasible),3)
global e_i = 1
for i = 1:resized_index_b
    for j = 1:Int64(lambda_iters-number_infeasible[1,i])
        example_output[e_i,1] = buffer_grid[1,j,i]
        global e_i += 1
    end
end
global e_i = 1
for i = 1:resized_index_b
    for j = 1:Int64(lambda_iters-number_infeasible[1,i])
        example_output[e_i,2] = cmax_grid[1,j,i]
        global e_i += 1
    end
end
global e_i = 1
for i = 1:resized_index_b
    for j = 1:Int64(lambda_iters-number_infeasible[1,i])
        example_output[e_i,3] = prob_store[1,j,i]
        global e_i += 1
    end
end
writedlm("3d_data.txt", example_output)


full_archive = zeros(lambda_iters,index_b,3)
for i = 1:lambda_iters
    for j = 1:index_b
        full_archive[i,j,1] = buffer_grid[1,i,j]
    end
end
for i = 1:lambda_iters
    for j = 1:index_b
        full_archive[i,j,2] = cmax_grid[1,i,j]
    end
end
for i = 1:lambda_iters
    for j = 1:index_b
        full_archive[i,j,3] = prob_store[1,i,j]
    end
end

dominate_label = zeros(lambda_iters,index_b)
for row = 1:lambda_iters
    for col = 1:index_b
        if dominate_label[row,col] == 0
            for j = 1:lambda_iters
                for k = 1:index_b
                    if dominate_label[j,k] == 0
                        if row != j && col != k
                            test_a = 0
                            test_b = 0
                            for z = 1:3
                                if full_archive[row,col,z] < full_archive[j,k,z]
                                    test_a += 1
                                    test_b = 1
                                elseif full_archive[row,col,z] <= full_archive[j,k,z]
                                    test_a += 1
                                end
                            end
                            if test_a == 3 && test_b == 1
                                dominate_label[j,k] = 1
                            end
                        end
                    end
                end
            end
        end
    end
end

global dom_count = 0
for i = 1:lambda_iters
    for j = 1:index_b
        if dominate_label[i,j] == 0
            global dom_count += 1
        end
    end
end
